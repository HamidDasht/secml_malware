import os,sys
import magic
import numpy as np
from secml.array import CArray

from secml_malware.attack.blackbox.c_gamma_sections_evasion import CGammaSectionsEvasionProblem
from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi
from secml_malware.attack.blackbox.ga.c_base_genetic_engine import CGeneticAlgorithm
from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware
from secml_malware.models.malconv import MalConv

GOODWARE_FOLDER = 'secml_malware/data/goodware_samples' #INSERT GOODWARE IN THAT FOLDER
MALWARE_FOLDER = 'secml_malware/data/malware_samples/test_folder'  #INSERT MALWARE IN THAT FOLDER
WEIGHT_FILE = "/home/hamid/Desktop/malconv/malconv.checkpoint"

if __name__ == "__main__":
    try:
        MALWARE_FOLDER = sys.argv[1]
        GOODWARE_FOLDER = sys.argv[2]
        WEIGHT_FILE = sys.argv[3]
    except:
        pass
    end2end = CClassifierEnd2EndMalware(MalConv())
    end2end.load_pretrained_model(path=WEIGHT_FILE)
    net = CEnd2EndWrapperPhi(end2end)

    section_population, what_from_who = CGammaSectionsEvasionProblem.create_section_population_from_folder(GOODWARE_FOLDER, how_many=10, sections_to_extract=['.rdata'])
    print(section_population, what_from_who)
    attack = CGammaSectionsEvasionProblem(section_population, net, population_size=10, penalty_regularizer=1e-6, iterations=10, threshold=0)


    X = []
    y = []
    file_names = []
    for i, f in enumerate(os.listdir(MALWARE_FOLDER)):
        path = os.path.join(MALWARE_FOLDER, f)
        if "PE32" not in magic.from_file(path):
            continue
        with open(path, "rb") as file_handle:
            code = file_handle.read()
        x = CArray(np.frombuffer(code, dtype=np.uint8)).atleast_2d()
        #net.classifier.input_shape = (1, x.size)

        _, confidence = net.predict(x, True)

        if confidence[0, 1].item() < 0.5:
            continue

        print(f"> Added {f} with confidence {confidence[0,1].item()}")
        X.append(x)
        conf = confidence[1][0].item()
        y.append([1 - conf, conf])
        file_names.append(f)

    
    engine = CGeneticAlgorithm(attack)
    success = 0
    for file_name, sample, label in zip(file_names, X, y):
        #net.classifier.input_shape = (1, sample.size)
        y_pred, adv_score, adv_ds, f_obj = engine.run(sample, CArray(label[1]))
        #print(file_name, engine.confidences_)
        if f_obj < 0.5:
            success += 1
        print(file_name, f_obj)
        #real_adv_x = attack.create_real_sample_from_adv(file_name, adv_ds.X[i, :])
        #with open(file_name, 'rb') as f:
        #   print('Original length: ', len(f.read()))
        #print('Adversarial sample length: ', len(real_adv_x))

    print(f"success rate: {success/len(file_names) *100}%")
    # Write adversarial example
    """
    adv_x = adv_ds.X[0,:]
    engine.write_adv_to_file(adv_x,'adv_exe')
    with open('adv_exe', 'rb') as h:
        code = h.read()
    real_adv_x = CArray(np.frombuffer(code, dtype=np.uint8))
    _, confidence = net.predict(CArray(real_adv_x), True)
    print(confidence[0,1].item())
    """
